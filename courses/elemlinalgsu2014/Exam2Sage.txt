sage: a = matrix([[1],[2],[3]])sage: a[1][2][3]sage: a*a.transpose()[1 2 3][2 4 6][3 6 9]sage: (a.transpose()*a)[0,0]14sage: P = a*a.transpose() / (a.transpose()*a)[0,0]sage: P[1/14  1/7 3/14][ 1/7  2/7  3/7][3/14  3/7 9/14]sage: P.row_space()Vector space of degree 3 and dimension 1 over Rational FieldBasis matrix:[1 2 3]sage: P.transpose().kernel()Vector space of degree 3 and dimension 2 over Rational FieldBasis matrix:[   1    0 -1/3][   0    1 -2/3]sage: P.kernel()Vector space of degree 3 and dimension 2 over Rational FieldBasis matrix:[   1    0 -1/3][   0    1 -2/3]sage: P.column_space()Vector space of degree 3 and dimension 1 over Rational FieldBasis matrix:[1 2 3]sage: g = DiGraph({ 1:{2:'1',4:'5'}, 2:{3:'2'}, 3:{1:'3'}, 4:{3:'4',2:'6' }})sage: g.set_pos( {1:[-1,0], 2:[1,0], 3:[0,1.5], 4:[0,.6]} )sage: g.show(edge_labels=True)<html><font color='black'><img src='cell://sage0.png'></font></html>sage: A = g.incidence_matrix().transpose()sage: A[-1  0  0  1][-1  1  0  0][ 0 -1  1  0][ 0  0  1 -1][ 0  1  0 -1][ 1  0 -1  0]sage: A.column_space()Sparse free module of degree 6 and rank 3 over Integer RingEchelon basis matrix:[ 1  0  0 -1 -1  0][ 0  1  0  1  1 -1][ 0  0  1  1  0 -1]sage: A.rank()3sage: A.transpose().kernel()Free module of degree 4 and rank 1 over Integer RingEchelon basis matrix:[1 1 1 1]sage: (A.transpose()*A).right_eigenvectors()[(0, [(1, 1, 1, 1)], 1), (4, [(1, 0, 0, -1),(0, 1, 0, -1),(0, 0, 1, -1)], 3)]sage: A = matrix([ [0,1],[20,1],[40,1],[80,1] ])sage: A[ 0  1][20  1][40  1][80  1]sage: b = vector([70,100,130,230])sage: b(70, 100, 130, 230)sage: x = A.solve_right(b)Traceback (most recent call last):...ValueError: matrix equation has no solutionssage: B = A.transpose() * Asage: B[8400  140][ 140    4]sage: d = A.transpose() * bsage: d(25600, 530)sage: Y = B.solve_right(d)sage: Y(141/70, 62)sage: y = Y[0] * x + Y[1]sage: y141/70*x + 62sage: L = plot(y, (-5,85), color='red')sage: L<html><font color='black'><img src='cell://sage0.png'></font></html>sage: c1 = (0,70)sage: c2 = (20,100)sage: c3 = (40,130)sage: c4 = (80,230)sage: (point([c1,c2,c3,c4], size=30)+ L).show()<html><font color='black'><img src='cell://sage0.png'></font></html>sage: p1 = (0,y(x=0))sage: p2 = (20, y(x=20))sage: p3 = (40, y(x=40))sage: p4 = (80, y(x=80))sage: Vector = vector((c1[1],c2[1],c3[1],c4[1]))sage: Vector(70, 100, 130, 230)sage: Projection = vector((p1[1],p2[1],p3[1],p4[1]))sage: Projection(62, 716/7, 998/7, 1562/7)sage: Error = Vector - Projectionsage: Error(8, -16/7, -88/7, 48/7)sage: (point([c1,c2,c3,c4], size=30)+ L + point([p1,p2,p3,p4],size=30, color = 'green')).show()<html><font color='black'><img src='cell://sage0.png'></font></html>sage: y(x=60).n(16)182.9sage: y(x=1100).n(16)2278.sage: M=matrix([[-1,1,0,0],[0,-1,1,0],[0,0,-1,-1]])sage: B=M.transpose()*Msage: B[0,0]=B[3,3]=2sage: B.determinant()5sage: B[ 2 -1  0  0][-1  2 -1  0][ 0 -1  2  1][ 0  0  1  2]